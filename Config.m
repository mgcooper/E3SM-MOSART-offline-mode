function Config(varargin)
% CONFIG set user configuration, environment variables, etc.
% 
%  See also Setup

% set environment variables to find data

thispath = fileparts(mfilename('fullpath'));

% this project path
setenv('MATLAB_ACTIVE_PROJECT_PATH', thispath);

% testbed folder ignored by git (see .git/info/exclude)
setenv('MATLAB_ACTIVE_TESTBED_PATH', ...
   fullfile( ...
   thispath,'testbed') ...
   );

% root path where data exists
setenv('USER_DATA_PATH', ...
   '/Users/coop558/work/data' ...
   );

% path to mosart template files
setenv('USER_E3SM_TEMPLATE_PATH', ...
   '/Users/coop558/work/data/e3sm/templates' ...
   );

% path to runoff forcing files
setenv('USER_E3SM_FORCING_PATH', ...
   '/Users/coop558/work/data/e3sm/forcing' ...
   );

% path to domain/mosart config files
setenv('USER_E3SM_CONFIG_PATH', ...
   '/Users/coop558/work/data/e3sm/config' ...
   );

% [keys,vals] = getuserpaths;


% -------- ICOM CONFIG -------- 

setenv('USER_GCAM_DATA_PATH',fullfile(getenv('USER_DATA_PATH'), ...
   'e3sm/compyfs/inputdata/waterdemand') ...
   );

% 3 May 2023 - previously I was using the hexwatershed files to defiine the
% domain, e.g. USER_E3SM_DOMAIN_DATA_PATH was set to a subfolder of
% USER_HEXWATERSHED_DATA_PATH but this is not correct in general ... actually
% now I recall, the idea is the 'DOMAIN_DATA' is the source data for the domain,
% so it is hexwatershed. This means if I want to use an existing domain file as
% the source of the domain data,  need to use USER_E3SM_CONFIG_PATH + the domain
% file name

setenv('USER_E3SM_DOMAIN_NCFILE_FILENAME', ...
   'domain_lnd_Mid-Atlantic_MPAS_c220107.nc' ...
   );

setenv('USER_E3SM_DOMAIN_NCFILE_FULLPATH', ...
   fullfile( ...
   getenv('USER_E3SM_CONFIG_PATH'), ...
   getenv('USER_E3SM_DOMAIN_NCFILE_FILENAME') ) ...
   );

% hexwatershed output version
setenv('USER_HEXWATERSHED_VERSION', ...
   'pyhexwatershed20221115006' ...
   );

% path to hexwatershed data
setenv('USER_HEXWATERSHED_DATA_PATH', ...
   '/Users/coop558/work/data/icom/hexwatershed' ...
   );

% setenv('USER_HEXWATERSHED_DATA_PATH', ...
%    fullfile( ...
%    getenv('USER_DATA_PATH'), ...
%    'icom/hexwatershed') ...
%    );

% path to pyflowline data
setenv('USER_PYFLOWLINE_DATA_PATH', ...
   fullfile( ...
   getenv('USER_HEXWATERSHED_DATA_PATH'), ...
   getenv('USER_HEXWATERSHED_VERSION'), ...
   'pyflowline') ...
   );

% path to hexwatershed mesh file (used to define the mosart domain)
setenv('USER_E3SM_DOMAIN_DATA_PATH', ...
   fullfile( ...
   getenv('USER_HEXWATERSHED_DATA_PATH'), ...
   getenv('USER_HEXWATERSHED_VERSION'), ...
   'hexwatershed') ...
   );

% path to mosart water management input data (dam/reservoir info)
setenv('USER_MOSART_WM_DATA_PATH', ...
   fullfile( ...
   getenv('USER_DATA_PATH'), ...
   'icom/dams/matfiles') ...
   );

% these could be moved into function calls with a switch for hexwatershed versus
% hillsloper. For Interface/Hillsloper runs, the 

setenv('USER_HEXWATERSHED_MESH_JSONFILE_FULLPATH', ... % was 'MESHJSONFILE'
   fullfile( ...
   getenv('USER_E3SM_DOMAIN_DATA_PATH'), ...
   'hexwatershed.json') ...
   );

setenv('USER_HEXWATERSHED_MESH_SHPFILE_FULLPATH', ... % was MESHFILE
   fullfile( ...
   getenv('USER_E3SM_DOMAIN_DATA_PATH'), ...
   'mpas_mesh.shp') ...
   );

setenv('USER_HEXWATERSHED_FLOWLINE_SHPFILE_FULLPATH', ... % was LINESHPFILE
   fullfile( ...
   getenv('USER_PYFLOWLINE_DATA_PATH'), ...
   'flowline_conceptual.shp') ...
   );

setenv('USER_MOSART_DAMS_FILE_FULLPATH', ... % was DAMSFILE
   fullfile( ...
   getenv('USER_MOSART_WM_DATA_PATH'), ...
   'icom_dams.mat') ...
   );

setenv('USER_E3SM_DOMAIN_BOUNDS_FILE_FULLPATH', ... % was BOUNDSFILE
   fullfile( ...
   getenv('USER_MOSART_WM_DATA_PATH'), ...
   'DELW_SUSQ_poly.mat') ...
   );

% %% if using shapefiles:
% 
% setenv('USER_MOSART_WM_DATA_PATH', ...
%    fullfile( ...
%    getenv('USER_DATA_PATH'), ...
%    'icom/GIS') ...
%    );
% 
% setenv('BOUNDSFILE', ...
%    fullfile( ...
%    getenv('USER_MOSART_WM_DATA_PATH'), ...
%    'SUSQ_DELW.shp') ...
%    );
% 
% setenv('DAMSFILE', ...
%    fullfile( ...
%    getenv('USER_MOSART_WM_DATA_PATH'), ...
%    'icom_dams_mesh.shp') ...
%    );
% 
% % % when I was only running the Susquehanna domain:
% % setenv('DAMSFILE',fullfile(getenv('USER_DATA_PATH'),'icom/GIS/susq_dams.shp'));
% % setenv('BOUNDSFILE',fullfile(getenv('USER_DATA_PATH'),'icom/GIS/SUSQ.shp'));







% % FOR REFERNECE, DELETE ONCE ABOVE IS WORKING
% 
% % root path where data exists
% setenv('USER_DATA_PATH','/Users/coop558/work/data');
% 
% datapath = fullfile(rootpath,'hexwatershed');
% hexvers = 'pyhexwatershed20221115006'; % 'pyhexwatershed20220901014';
% 
% setenv('HEXVERS',hexvers);
% setenv('DATAPATH',fullfile(datapath,hexvers));
% setenv('MESHFILE',fullfile(datapath,hexvers,'hexwatershed/mpas_mesh.shp'));
% setenv('LINEFILE',fullfile(datapath,hexvers,'pyflowline/flowline_conceptual.shp'));
% setenv('MESHJSONFILE',fullfile(datapath,hexvers,'hexwatershed/hexwatershed.json'));
% 
% % these ones are relative to the top-level icom data path
% setenv('DAMSFILE',fullfile(rootpath,'dams/matfiles/icom_dams.mat'));
% setenv('BOUNDSFILE',fullfile(rootpath,'dams/matfiles/DELW_SUSQ_poly.mat'));
% 
% % setenv('BOUNDSFILE',fullfile(rootpath,'GIS/SUSQ_DELW.shp'));
% % setenv('DAMSFILE',fullfile(rootpath,'GIS/icom_dams_mesh.shp'));
% % setenv('BOUNDSFILE',fullfile(rootpath,'GIS/SUSQ_DELW.shp'));
% 
% % % this one is saved in the local data folder
% % setenv('MASKFILE',fullfile(rootpath,'GIS/SUSQ_DELW.shp'));
% 
% % % when I was only running the Susquehanna domain:
% % setenv('DAMSFILE',fullfile(rootpath,'GIS/susq_dams.shp'));
% % setenv('BOUNDSFILE',fullfile(rootpath,'GIS/SUSQ.shp'));